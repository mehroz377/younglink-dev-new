security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Sonata\UserBundle\Model\UserInterface: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_login:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

#        api:
#            pattern: ^/api
#            stateless: true
#            provider: app_user_provider
#            jwt: ~
        admin:
            lazy: true
            pattern: /admin(.*)
            provider: app_user_provider
            context: user
            form_login:
                login_path: sonata_user_admin_security_login
                check_path: sonata_user_admin_security_check
                default_target_path: sonata_admin_dashboard
            logout:
                path: sonata_user_admin_security_logout
                target: sonata_user_admin_security_login
            remember_me:
                secret: '%env(APP_SECRET)%'
                lifetime: 2629746
                path: /admin

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/login$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/logout$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/login_check$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/request$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/check-email$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/reset/.*$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/, role: ROLE_SONATA_ADMIN }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/.*, role: PUBLIC_ACCESS }
        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        ROLE_STUDENT: [ ROLE_USER ]
        ROLE_API_USER: [ ROLE_USER ]
        ROLE_PARENT: [ ROLE_USER ]
        ROLE_TEACHER: [ ROLE_USER ]
        ROLE_DIRECTOR: [ ROLE_TEACHER ]
        ROLE_PSYCHOLOGIST: [ ROLE_TEACHER ]
        ROLE_SONATA_ADMIN: [ ROLE_USER ]
acl:
    connection: default

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
